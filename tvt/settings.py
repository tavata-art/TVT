"""
Django settings for tvt project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from pathlib import Path #-> Asegúrate de que BASE_DIR está definido con pathlib
from decouple import config, Csv
from pathlib import Path
import os
import pymysql
pymysql.install_as_MySQLdb()
from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# 1. Leer la variable de entorno principal.
#    Por seguridad, si no se define, se asume 'production'.
ENVIRONMENT = config('ENVIRONMENT', default='production')

print("*********************************************")
print(f"**** EJECUTANDO EN AMBIENTE: {ENVIRONMENT.upper()} ****")
print("*********************************************")


# 2. Configurar otras variables basadas en el ambiente
if ENVIRONMENT == 'development':
    SECRET_KEY = config('SECRET_KEY', default='django-insecure-dev-key-default')
    DEBUG = True
    ALLOWED_HOSTS = ['127.0.0.1', 'localhost']
else: # Para 'testing', 'production' u otros
    SECRET_KEY = config('SECRET_KEY')
    # DEBUG es False por defecto, a menos que un ambiente específico lo active
    DEBUG = config('DEBUG', default=False, cast=bool)
    ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=Csv()) #-> Permite múltiples hosts separados por comas


# Application definition

INSTALLED_APPS = [
    'modeltranslation', # <-- Antes del admin
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_summernote',
    'core.apps.CoreConfig',
    'pages.apps.PagesConfig',
    'blog.apps.BlogConfig',
    'menus.apps.MenusConfig', # ¡Nuestra nueva app!
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',  # <-- ¡NUEVA LÍNEA!
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'tvt.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'tvt.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# 3. Configurar la base de datos basada en el ambiente
# Primero, la configuración por defecto para desarrollo
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Luego, sobrescribimos si estamos en un ambiente de tipo MySQL
if ENVIRONMENT == 'testing' or ENVIRONMENT == 'production':
    DATABASES['default'] = {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST'),
        'PORT': config('DB_PORT', default='3306'),
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        },
    }





# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

# Idioma por defecto
LANGUAGE_CODE = 'es' 

# Lista de idiomas disponibles
LANGUAGES = [
    ('es', _('Español')),
    ('en', _('English')),
]

# Rutas donde Django buscará los archivos de traducción (.po/.mo)
LOCALE_PATHS = [
    BASE_DIR / 'locale/',
]

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# La ruta donde `collectstatic` copiará todos los archivos para producción.
# Es bueno tenerla definida aunque en desarrollo no se use directamente.
STATIC_ROOT = BASE_DIR / 'staticfiles'

# ¡LA CONFIGURACIÓN CLAVE PARA DESARROLLO!
# Directorios adicionales donde el servidor de desarrollo de Django buscará archivos estáticos.
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

X_FRAME_OPTIONS = 'SAMEORIGIN'
